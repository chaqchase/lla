// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryMetadata {
    #[prost(uint64, tag = "1")]
    pub size: u64,
    #[prost(uint64, tag = "2")]
    pub modified: u64,
    #[prost(uint64, tag = "3")]
    pub accessed: u64,
    #[prost(uint64, tag = "4")]
    pub created: u64,
    #[prost(bool, tag = "5")]
    pub is_dir: bool,
    #[prost(bool, tag = "6")]
    pub is_file: bool,
    #[prost(bool, tag = "7")]
    pub is_symlink: bool,
    #[prost(uint32, tag = "8")]
    pub permissions: u32,
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(uint32, tag = "10")]
    pub gid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecoratedEntry {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<EntryMetadata>,
    #[prost(map = "string, string", tag = "3")]
    pub custom_fields:
        ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PluginMessage {
    #[prost(
        oneof = "plugin_message::Message",
        tags = "1, 2, 3, 4, 5, 6, 7, 101, 102, 103, 104, 105, 106, 107, 108"
    )]
    pub message: ::core::option::Option<plugin_message::Message>,
}
/// Nested message and enum types in `PluginMessage`.
pub mod plugin_message {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(bool, tag = "1")]
        GetName(bool),
        #[prost(bool, tag = "2")]
        GetVersion(bool),
        #[prost(bool, tag = "3")]
        GetDescription(bool),
        #[prost(bool, tag = "4")]
        GetSupportedFormats(bool),
        #[prost(message, tag = "5")]
        Decorate(super::DecoratedEntry),
        #[prost(message, tag = "6")]
        FormatField(super::FormatFieldRequest),
        #[prost(message, tag = "7")]
        Action(super::ActionRequest),
        #[prost(string, tag = "101")]
        NameResponse(::prost::alloc::string::String),
        #[prost(string, tag = "102")]
        VersionResponse(::prost::alloc::string::String),
        #[prost(string, tag = "103")]
        DescriptionResponse(::prost::alloc::string::String),
        #[prost(message, tag = "104")]
        FormatsResponse(super::SupportedFormatsResponse),
        #[prost(message, tag = "105")]
        DecoratedResponse(super::DecoratedEntry),
        #[prost(message, tag = "106")]
        FieldResponse(super::FormattedFieldResponse),
        #[prost(message, tag = "107")]
        ActionResponse(super::ActionResponse),
        #[prost(string, tag = "108")]
        ErrorResponse(::prost::alloc::string::String),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormatFieldRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<DecoratedEntry>,
    #[prost(string, tag = "2")]
    pub format: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionRequest {
    #[prost(string, tag = "1")]
    pub action: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SupportedFormatsResponse {
    #[prost(string, repeated, tag = "1")]
    pub formats: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FormattedFieldResponse {
    #[prost(string, optional, tag = "1")]
    pub field: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, optional, tag = "2")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
