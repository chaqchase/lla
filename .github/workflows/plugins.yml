name: Build Plugins

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  build-plugins:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            os_label: linux
            arch_label: amd64
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            os_label: linux
            arch_label: arm64
          - runner: ubuntu-22.04
            target: i686-unknown-linux-gnu
            os_label: linux
            arch_label: i686
          - runner: macos-13
            target: x86_64-apple-darwin
            os_label: macos
            arch_label: amd64
          - runner: macos-14
            target: aarch64-apple-darwin
            os_label: macos
            arch_label: arm64
          # - runner: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   os_label: windows
          #   arch_label: amd64

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross toolchain (Linux cross-compilation)
        if: runner.os == 'Linux' && (contains(matrix.target, 'aarch64') || contains(matrix.target, 'i686'))
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-i686-linux-gnu
          sudo apt-get install -y crossbuild-essential-arm64 crossbuild-essential-i386
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            echo "CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=i686-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Make build script executable
        shell: bash
        run: chmod +x scripts/build_plugins.sh

      - name: Build plugins
        shell: bash
        run: ./scripts/build_plugins.sh --target ${{ matrix.target }}

      - name: Upload plugins archive
        uses: actions/upload-artifact@v4
        with:
          name: plugins-${{ matrix.os_label }}-${{ matrix.arch_label }}
          path: |
            dist/plugins-${{ matrix.os_label }}-${{ matrix.arch_label }}.tar.gz
            dist/plugins-${{ matrix.os_label }}-${{ matrix.arch_label }}.zip
          if-no-files-found: ignore
          compression-level: 0

  publish:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build-plugins]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine release tag
        id: release_tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            # Get latest release tag for other events
            latest_tag=$(gh release view --json tagName --jq '.tagName' || echo "")
            if [[ -z "$latest_tag" ]]; then
              echo "No releases found, skipping plugin upload"
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "tag=$latest_tag" >> $GITHUB_OUTPUT
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        if: steps.release_tag.outputs.skip != 'true'
        uses: actions/download-artifact@v4
        with:
          path: release_assets
          merge-multiple: true

      - name: List assets
        if: steps.release_tag.outputs.skip != 'true'
        run: ls -R release_assets

      - name: Upload to GitHub Release (overwrite existing)
        if: steps.release_tag.outputs.skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag="${{ steps.release_tag.outputs.tag }}"
          echo "Uploading plugin archives to release $tag (with clobber)"

          shopt -s nullglob
          for asset in release_assets/plugins-*.tar.gz release_assets/plugins-*.zip; do
            echo "Uploading $asset"
            gh release upload "$tag" "$asset" --clobber
          done
